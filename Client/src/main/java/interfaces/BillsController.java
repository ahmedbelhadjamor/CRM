package interfaces;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import java.sql.Date;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import javax.mail.MessagingException;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import api.Apiservice;
import entities.Abonnement;
import entities.Bills;
import entities.Client;
import entities.Operator;
import javafx.beans.property.ReadOnlyIntegerWrapper;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

import javafx.scene.input.MouseEvent;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javassist.tools.Callback;
import servicefacture.FactureRemote;
import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class BillsController implements Initializable  {
	@FXML
	private TextField searchbill;
	@FXML
	private TextField cin;
	@FXML
	private TextField clientname;
	@FXML
	private TableView<Bills> bills;
	@FXML
	private TableColumn<Bills,Integer> reference;
	@FXML
	private TableColumn<Bills, String> paymenttype;
	@FXML
	private TableColumn<Bills,Date> paymentdate;
	@FXML
	private TableColumn<Bills,Date> date;
	@FXML
	private TableColumn<Bills,Float> amount;
	@FXML
	private TableColumn<Bills,String> bill;
	@FXML
	private TableColumn<Bills,Boolean> state;
	@FXML
	private Button cashpay;
	@FXML
	private Button cardpay;
	@FXML
	private Button print;
	@FXML
	private ImageView back;
	@FXML
	private ImageView billsmenu;
	@FXML
	private ImageView sales;
	@FXML
	private ImageView reload;
	@FXML
	private ImageView stat;
	@FXML
	private ComboBox<String> type;
	@FXML
	private Label idoperator;
	@FXML
	private ImageView logoop;
	@FXML
	private ImageView sendmail;
	static int okay;
	
	  ObservableList<String> T =FXCollections.observableArrayList("Cash","Card","Check");
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// TODO Auto-generated method stub
		
	
			
			
			type.setItems(T);
			
			sales.setVisible(false);
		
		
	}

	// Event Listener on TableView[#bills].onMouseClicked
	@FXML
	public void selectbill(MouseEvent event) throws NamingException {
		// TODO Autogenerated
		//------------------context-----------------------
		Context context;
		
		context = new InitialContext();
		String j2 = "/CRM-ear/CRM-ejb/Facture!servicefacture.FactureRemote";
		FactureRemote s= (FactureRemote) context.lookup(j2);
		//----------------selected bill---------------------
		int ref =bills.getSelectionModel().getSelectedItem().getIdbill();
		
		Bills b= new Bills();
		Client c= new Client();
		b=s.findBillbyid(ref);
		c=b.getClient();
		cin.setText(String.valueOf(c.getCin()));
		clientname.setText(c.getName());
	
		
	}
	// Event Listener on Button[#cashpay].onMouseClicked
	@FXML
	public void cashpayement(MouseEvent event) throws NamingException, IOException {
		// TODO Autogenerated
		//------------------context-----------------------
		Context context;
		
		context = new InitialContext();
		String j2 = "/CRM-ear/CRM-ejb/Facture!servicefacture.FactureRemote";
		FactureRemote s= (FactureRemote) context.lookup(j2);
		//----------------update bill---------------------
		boolean state =bills.getSelectionModel().getSelectedItem().getEtat();
		if(state==true)
		{
			 Alert alert = new Alert(AlertType.INFORMATION);
			   alert.setTitle("Information Dialog");
			   alert.setHeaderText(null);
			   alert.setContentText("Bill already been paid!");
			   alert.showAndWait();
		}
		else{
		
		int ref =bills.getSelectionModel().getSelectedItem().getIdbill();
		s.updateBill(ref, type.getValue());
		 Alert alert = new Alert(AlertType.INFORMATION);
		   alert.setTitle("Information Dialog");
		   alert.setHeaderText(null);
		   alert.setContentText("Bill had been paid!");
		   alert.showAndWait();
		   //-------------------reload--------------------
		   int idop= Integer.parseInt(idoperator.getText());
			FXMLLoader loader = new FXMLLoader(getClass().getResource("Bills.fxml"));
			Parent root=loader.load();
			BillsController display=loader.getController();
			//display.setclient(c.getId());
			
			//System.out.println(c.getIdoperator());

			 BillsController controller = 
			loader.<BillsController>getController();
			controller.samereload(this,idop);
			System.out.println("id login: "+idop);
			 
			   cashpay.getScene().setRoot(root);
		   }
	}
	// Event Listener on Button[#cardpay].onMouseClicked
	@FXML
	public void cardpayment(MouseEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#print].onMouseClicked
	@FXML
	public void printbill(MouseEvent event) throws IOException {
		// TODO Autogenerated
		if(bills.getSelectionModel().getSelectedItem().getEtat()==false)
		{
			 Alert alert = new Alert(AlertType.INFORMATION);
			   alert.setTitle("Information Dialog");
			   alert.setHeaderText(null);
			   alert.setContentText("Bill is not paid yet!");
			   alert.showAndWait();
		}
		else
		{
			int reference =bills.getSelectionModel().getSelectedItem().getReference();
			String billname =bills.getSelectionModel().getSelectedItem().getName();
			Float montant =bills.getSelectionModel().getSelectedItem().getAmount();
			String paytype =bills.getSelectionModel().getSelectedItem().getPaymenttype();
			Date payday =bills.getSelectionModel().getSelectedItem().getPaymentdate();
			Operator o=bills.getSelectionModel().getSelectedItem().getOperator();
			String clientn=clientname.getText();
			String cinn=cin.getText();
			 Apiservice d=new Apiservice();
			 System.out.println(reference+clientn+montant);
			 if (o.getName().equals("ooredoo"))
			 {	 String url="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQt9dEGqzj-90s3tMYwO-WLXzgFdTSYYwO63FDR2qX05b5bCccyDA";
			 d.pdfbill(clientn, billname, reference, montant, Integer.parseInt(cinn), payday, paytype, url);
			 Alert alert = new Alert(AlertType.INFORMATION);
			   alert.setTitle("Information Dialog");
			   alert.setHeaderText(null);
			   alert.setContentText("Bill was downloaded!");
			   alert.showAndWait();
			 }
			 else if(o.getName().equals("orange"))
					 {	 String url="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTD5-m1iRoa9Qbf5XOLVJwKc9wUop8d_wQ_SzJbJE4ti2rHNlNK";
					 d.pdfbill(clientn, billname, reference, montant, Integer.parseInt(cinn), payday, paytype, url);
					 Alert alert = new Alert(AlertType.INFORMATION);
					   alert.setTitle("Information Dialog");
					   alert.setHeaderText(null);
					   alert.setContentText("Bill was downloaded!");
					   alert.showAndWait();
					 }
		}
	}
	// Event Listener on ImageView[#back].onMouseClicked
	@FXML
	public void back(MouseEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on ImageView[#billsmenu].onMouseClicked
	@FXML
	public void billsredirection(MouseEvent event) throws IOException, NamingException {
		// TODO Autogenerated
		int idop= Integer.parseInt(idoperator.getText());
		FXMLLoader loader = new FXMLLoader(getClass().getResource("FusedBills.fxml"));
		Parent root=loader.load();
		FusedBillsController display=loader.getController();
		//display.setclient(c.getId());
		
		//System.out.println(c.getIdoperator());

		FusedBillsController controller = 
		loader.<FusedBillsController>getController();
		controller.logo(this,idop);
		 
		   billsmenu.getScene().setRoot(root);
	}
	// Event Listener on ImageView[#sales].onMouseClicked
	@FXML
	public void salesredirection(MouseEvent event) throws IOException, NamingException {
		// TODO Autogenerated
		int idop= Integer.parseInt(idoperator.getText());
		FXMLLoader loader = new FXMLLoader(getClass().getResource("Devis.fxml"));
		Parent root=loader.load();
		DevisController display=loader.getController();
		//display.setclient(c.getId());
		
		//System.out.println(c.getIdoperator());

		DevisController controller = 
		loader.<DevisController>getController();
		controller.logo(this,idop);
		 
		   sales.getScene().setRoot(root);
	}
    private void saveTextToFile(String content, File file) throws FileNotFoundException {
        
            PrintWriter writer;
            writer = new PrintWriter(file);
            writer.println(content);
            writer.close();
        
    }
    @FXML
	public void refresh(MouseEvent event) throws NamingException, IOException
	{
    	//------------------context-----------------------
    			Context context;
    			
    			context = new InitialContext();
    			String j2 = "/CRM-ear/CRM-ejb/Facture!servicefacture.FactureRemote";
    			FactureRemote s= (FactureRemote) context.lookup(j2);
    			//----------------update bill---------------------
    	
		  Bills b=new Bills();
		  for(Abonnement l :s.listeabonnement()){
            // libsNoms.add(Integer.toString(l.getNum_vol())+l.getCompagnie

			
				  
			
				 
				 if(s.findBillbyreference(l.getReference())==null)
				 
				 {
				  b.setAmount(l.getAmount());
				  b.setReference(l.getReference());
				  b.setClient(l.getClient());
				  b.setOperator(l.getOperator());
				  b.setEtat(false);
				  b.setDate(l.getDate());
				  b.setName(l.getName());
				  s.addBill(b);
				System.out.println(b.toString());
				 }
			
			  //System.out.println(s.listeabonnement());
			
		   		}
			//Parent root = FXMLLoader.load(getClass().getResource("Bills.fxml"));
			   //reload.getScene().setRoot(root);
		  //--------------------------table-------------------------------------
		  List billiste= new ArrayList();
			List clientliste;
			billiste=s.listefacture(s.findOperatorbyid(Integer.parseInt(idoperator.getText())));
			
			ObservableList<Bills> OL = FXCollections.observableArrayList(billiste);
			
			bills.setItems(OL);
			reference.setCellValueFactory(new PropertyValueFactory<>("reference"));
			paymenttype.setCellValueFactory(new PropertyValueFactory<>("paymenttype"));
			paymentdate.setCellValueFactory(new PropertyValueFactory<>("paymentdate"));
			date.setCellValueFactory(new PropertyValueFactory<>("date"));
			amount.setCellValueFactory(new PropertyValueFactory<>("amount"));
			bill.setCellValueFactory(new PropertyValueFactory<>("name"));
			state.setCellValueFactory(new PropertyValueFactory<>("etat"));
			
			//-----------------------------------
		
			// 1. Wrap the ObservableList in a FilteredList (initially display all data).
	        FilteredList<Bills> filteredData = new FilteredList<>(OL, p -> true);
	        
	        // 2. Set the filter Predicate whenever the filter changes.
	        searchbill.textProperty().addListener((observable, oldValue, newValue) -> {
	            filteredData.setPredicate(Bill -> {
	                // If filter text is empty, display all persons.
	                if (newValue == null || newValue.isEmpty()) {
	                    return true;
	                }
	                
	                // Compare 
	               
	                String lowerCaseFilter = newValue.toLowerCase();
	                
	                if (String.valueOf(Bill.getReference()).toLowerCase().contains(lowerCaseFilter)) {
	                    return true; // Filter matches first name.
	                } 
	             
	                 return false;
	            });
	        });
	        
	        // 3. Wrap the FilteredList in a SortedList. 
	        SortedList<Bills> sortedData = new SortedList<>(filteredData);
	        
	        // 4. Bind the SortedList comparator to the TableView comparator.
	        sortedData.comparatorProperty().bind(bills.comparatorProperty());
	        
	        // 5. Add sorted (and filtered) data to the table.
	        bills.setItems(sortedData);
		
	}
	public void logo(LoginController t, int id) throws FileNotFoundException, NamingException {
		
		//------------------context-----------------------
				Context context;
				
				context = new InitialContext();
				String j2 = "/CRM-ear/CRM-ejb/Facture!servicefacture.FactureRemote";
				FactureRemote dao= (FactureRemote) context.lookup(j2);
				//---------------login--------------------
			
			dao.findOperatorbyid(id);
			idoperator.setText(String.valueOf(id));
			int i=Integer.parseInt(idoperator.getText());
			FileInputStream input = new FileInputStream(dao.findOperatorbyid(id).getImage());
			Image img = new Image(input);
			logoop.setImage(img);

	}
	public void backdevis(DevisController t, int id) throws FileNotFoundException, NamingException {
		
		//------------------context-----------------------
				Context context;
				
				context = new InitialContext();
				String j2 = "/CRM-ear/CRM-ejb/Facture!servicefacture.FactureRemote";
				FactureRemote dao= (FactureRemote) context.lookup(j2);
				//---------------login--------------------
			
			dao.findOperatorbyid(id);
			idoperator.setText(String.valueOf(id));
			int i=Integer.parseInt(idoperator.getText());
			FileInputStream input = new FileInputStream(dao.findOperatorbyid(id).getImage());
			Image img = new Image(input);
			logoop.setImage(img);

	}
	public void backfused(FusedBillsController t, int id) throws FileNotFoundException, NamingException {
		
		//------------------context-----------------------
				Context context;
				
				context = new InitialContext();
				String j2 = "/CRM-ear/CRM-ejb/Facture!servicefacture.FactureRemote";
				FactureRemote dao= (FactureRemote) context.lookup(j2);
				//---------------login--------------------
			
			dao.findOperatorbyid(id);
			idoperator.setText(String.valueOf(id));
			int i=Integer.parseInt(idoperator.getText());
			FileInputStream input = new FileInputStream(dao.findOperatorbyid(id).getImage());
			Image img = new Image(input);
			logoop.setImage(img);

	}
	public void samereload(BillsController t, int id) throws FileNotFoundException, NamingException {
		
		//------------------context-----------------------
				Context context;
				
				context = new InitialContext();
				String j2 = "/CRM-ear/CRM-ejb/Facture!servicefacture.FactureRemote";
				FactureRemote dao= (FactureRemote) context.lookup(j2);
				//---------------login--------------------
			
			dao.findOperatorbyid(id);
			idoperator.setText(String.valueOf(id));
			int i=Integer.parseInt(idoperator.getText());
			FileInputStream input = new FileInputStream(dao.findOperatorbyid(id).getImage());
			Image img = new Image(input);
			logoop.setImage(img);

	}
    @FXML
	public void send(MouseEvent event) throws NamingException, MessagingException
	{
    	//------------------context-----------------------
		Context context;
		
		context = new InitialContext();
		String j2 = "/CRM-ear/CRM-ejb/Facture!servicefacture.FactureRemote";
		FactureRemote s= (FactureRemote) context.lookup(j2);
		//---------------send--------------------
    	for(Bills l: s.listefacture(s.findOperatorbyid(Integer.parseInt(idoperator.getText()))))
		{
			LocalDate dateBefore = LocalDate.now() ;
	        //29-July-2-ppppppppppppp017, change this to your desired End Date
		LocalDate dateAfter = l.getDate().toLocalDate();
		long noOfDaysBetween = ChronoUnit.DAYS.between(dateBefore, dateAfter);
		if(noOfDaysBetween<=5 &&l.getEtat()==false)
		{
			String d2="your Facture: "+l.getName()+" will expire in: "+noOfDaysBetween+" days!";
			String d3=" <h2> Please porceed for the paiment of your facture: "+
					l.getName()+" reference: "+l.getReference()+" before "+l.getDate()+"//Operator: "+l.getOperator().getName()+"!! </h2><p>thank you!</p>";
			  Apiservice d=new Apiservice();
			  d.sendAsHtml(l.getClient().getEmail(),d2,d3);
			  System.out.println("number1 : "+noOfDaysBetween);
			  Alert alert = new Alert(AlertType.INFORMATION);
			   alert.setTitle("Reference : "+l.getReference());
			   alert.setHeaderText(null);
			   alert.setContentText("Emails had been sent for! "+l.getClient().getName()+",Emails: "+ l.getClient().getEmail()+"//Operator: " +l.getOperator().getName());
			   alert.showAndWait();
		}
	
	}
	}
    @FXML
	public void statt(MouseEvent event) throws IOException
	{
    	FXMLLoader loader = new FXMLLoader(getClass().getResource("StatBills.fxml"));
    	Parent root=loader.load();
    	
    	 
    		 Scene scAddPost = new Scene(root);
    		 Stage s1 = new Stage();
    		 s1.setScene(scAddPost);
    		 s1.show();
	}
}
